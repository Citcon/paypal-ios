// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name CorePayments
import AuthenticationServices
import Foundation
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_documentation(visibility: private) public struct GraphQLHTTPResponse<T> : Swift.Decodable where T : Swift.Decodable {
  public let data: T?
  public init(from decoder: any Swift.Decoder) throws
}
@_documentation(visibility: private) public struct HTTPResponse {
}
@_documentation(visibility: private) public struct HTTPRequest {
  public init(headers: [CorePayments.HTTPHeader : Swift.String], method: CorePayments.HTTPMethod, url: Foundation.URL, body: Foundation.Data?)
}
@_documentation(visibility: private) public enum PayPalCoreConstants {
  public static let payPalSDKVersion: Swift.String
  public static let callbackURLScheme: Swift.String
}
public enum CorePaymentsError {
  public static let urlEncodingFailed: CorePayments.CoreSDKError
}
public struct CoreConfig {
  public let environment: CorePayments.Environment
  public let clientID: Swift.String
  public init(clientID: Swift.String, environment: CorePayments.Environment)
}
public enum HTTPMethod : Swift.String {
  case get
  case post
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum HTTPHeader : Swift.String {
  case accept
  case acceptLanguage
  case appName
  case authorization
  case contentType
  case origin
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class WebAuthenticationSession : ObjectiveC.NSObject {
  public func start(url: Foundation.URL, context: any AuthenticationServices.ASWebAuthenticationPresentationContextProviding, sessionDidDisplay: @escaping (Swift.Bool) -> Swift.Void, sessionDidComplete: @escaping (Foundation.URL?, (any Swift.Error)?) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
public enum Environment {
  case sandbox
  case live
  public var graphQLURL: Foundation.URL {
    get
  }
  public var toString: Swift.String {
    get
  }
  public static func == (a: CorePayments.Environment, b: CorePayments.Environment) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_documentation(visibility: private) public struct AnalyticsService {
  public init(coreConfig: CorePayments.CoreConfig, orderID: Swift.String)
  public init(coreConfig: CorePayments.CoreConfig, setupToken: Swift.String)
  public func sendEvent(_ name: Swift.String, correlationID: Swift.String? = nil, buttonType: Swift.String? = nil)
}
extension Foundation.URLSession : CorePayments.URLSessionProtocol {
  #if compiler(>=5.3) && $AsyncAwait
  public func performRequest(with urlRequest: Foundation.URLRequest) async throws -> (Foundation.Data, Foundation.URLResponse)
  #endif
}
@_documentation(visibility: private) public struct RESTRequest {
  public init(path: Swift.String, method: CorePayments.HTTPMethod, queryParameters: [Swift.String : Swift.String]? = nil, postParameters: (any Swift.Encodable)? = nil)
}
@_documentation(visibility: private) public protocol URLSessionProtocol {
  #if compiler(>=5.3) && $AsyncAwait
  func performRequest(with urlRequest: Foundation.URLRequest) async throws -> (Foundation.Data, Foundation.URLResponse)
  #endif
}
public struct CoreSDKError : Swift.Error, Foundation.LocalizedError {
  public let code: Swift.Int?
  public let domain: Swift.String?
  public let errorDescription: Swift.String?
  public init(code: Swift.Int?, domain: Swift.String?, errorDescription: Swift.String?)
}
@_hasMissingDesignatedInitializers @_documentation(visibility: private) public class NetworkingClient {
  public init(coreConfig: CorePayments.CoreConfig)
  #if compiler(>=5.3) && $AsyncAwait
  @_documentation(visibility: private) public func fetch(request: CorePayments.RESTRequest) async throws -> CorePayments.HTTPResponse
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @_documentation(visibility: private) public func fetch(request: CorePayments.GraphQLRequest) async throws -> CorePayments.HTTPResponse
  #endif
  @objc deinit
}
@_documentation(visibility: private) public class HTTPResponseParser {
  public init(decoder: Foundation.JSONDecoder = JSONDecoder())
  public func parseREST<T>(_ httpResponse: CorePayments.HTTPResponse, as type: T.Type) throws -> T where T : Swift.Decodable
  public func parseGraphQL<T>(_ httpResponse: CorePayments.HTTPResponse, as type: T.Type) throws -> T where T : Swift.Decodable
  @objc deinit
}
@_documentation(visibility: private) public struct GraphQLRequest {
  public init(query: Swift.String, variables: any Swift.Encodable, queryNameForURL: Swift.String? = nil)
}
extension CorePayments.HTTPMethod : Swift.Equatable {}
extension CorePayments.HTTPMethod : Swift.Hashable {}
extension CorePayments.HTTPMethod : Swift.RawRepresentable {}
extension CorePayments.HTTPHeader : Swift.Equatable {}
extension CorePayments.HTTPHeader : Swift.Hashable {}
extension CorePayments.HTTPHeader : Swift.RawRepresentable {}
extension CorePayments.Environment : Swift.Equatable {}
extension CorePayments.Environment : Swift.Hashable {}
